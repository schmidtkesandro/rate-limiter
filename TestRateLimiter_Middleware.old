package ratelimiter_test

import (
	"net/http"
	"net/http/httptest"
	"testing"
)

func TestRateLimiter_Middleware(t *testing.T) {
	// Criar uma instância do RateLimiter
	limiter := NewRateLimiter(DefaultConfig)

	// Criar um handler de teste
	handler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.Write([]byte("Test response"))
	})

	// Criar um request de teste com IP e token
	req := httptest.NewRequest("GET", "/", nil)
	req.RemoteAddr = "192.168.1.1:12345"
	req.Header.Set("API_KEY", "test_token")

	// Criar um ResponseWriter de teste
	rr := httptest.NewRecorder()

	// Chamar o middleware
	limiter.Middleware(handler).ServeHTTP(rr, req)

	// Verificar o código de status
	if status := rr.Code; status != http.StatusOK {
		t.Errorf("Handler retornou código de status errado: esperado %v, recebido %v", http.StatusOK, status)
	}

	// Verificar o corpo da resposta
	expected := "Test response"
	if rr.Body.String() != expected {
		t.Errorf("Handler retornou corpo de resposta errado: esperado %v, recebido %v", expected, rr.Body.String())
	}
}
